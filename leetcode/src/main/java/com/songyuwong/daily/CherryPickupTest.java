package com.songyuwong.daily;

import org.junit.Test;

/**
 * <p>
 * 一个N x N的网格(grid) 代表了一块樱桃地，每个格子由以下三种数字的一种来表示：
 * <p>
 * 0 表示这个格子是空的，所以你可以穿过它。
 * <p>
 * 1 表示这个格子里装着一个樱桃，你可以摘到樱桃然后穿过它。
 * <p>
 * -1 表示这个格子里有荆棘，挡着你的路。
 * <p>
 * 你的任务是在遵守下列规则的情况下，尽可能的摘到最多樱桃：
 * <p>
 * <p>
 * 从位置 (0, 0) 出发，最后到达 (N-1, N-1) ，只能向下或向右走，并且只能穿越有效的格子（即只可以穿过值为0或者1的格子）；
 * <p>
 * 当到达 (N-1, N-1) 后，你要继续走，直到返回到 (0, 0) ，只能向上或向左走，并且只能穿越有效的格子；
 * <p>
 * 当你经过一个格子且这个格子包含一个樱桃时，你将摘到樱桃并且这个格子会变成空的（值变为0）；
 * <p>
 * 如果在 (0, 0) 和 (N-1, N-1) 之间不存在一条可经过的路径，则没有任何一个樱桃能被摘到。
 * <p>
 * 示例 1:
 * <p>
 * 输入: grid =
 * <p>
 * [[0, 1, -1],
 * <p>
 * [1, 0, -1],
 * <p>
 * [1, 1,  1]]
 * <p>
 * 输出: 5
 * <p>
 * 解释：
 * <p>
 * 玩家从（0,0）点出发，经过了向下走，向下走，向右走，向右走，到达了点(2, 2)。
 * <p>
 * 在这趟单程中，总共摘到了4颗樱桃，矩阵变成了[[0,1,-1],[0,0,-1],[0,0,0]]。
 * <p>
 * 接着，这名玩家向左走，向上走，向上走，向左走，返回了起始点，又摘到了1颗樱桃。
 * <p>
 * 在旅程中，总共摘到了5颗樱桃，这是可以摘到的最大值了。
 * <p>
 * 说明:
 * <p>
 * grid 是一个 N * N 的二维数组，N的取值范围是1 <= N <= 50。
 * 每一个 grid[i][j] 都是集合 {-1, 0, 1}其中的一个数。
 * 可以保证起点 grid[0][0] 和终点 grid[N-1][N-1] 的值都不会是 -1。
 * <p>
 * <p>
 * 来源：力扣（LeetCode）
 * <p>
 * 链接：<a href="https://leetcode.cn/problems/cherry-pickup">https://leetcode.cn/problems/cherry-pickup</a>
 * <p>
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * <p>
 * </p>
 *
 * @author SongYu
 * @since 2022/7/10
 */
public class CherryPickupTest {

    /**
     * <P>
     * 玩家从 (0,0) 到 (n-1,n-1) 再返回原点，摘樱桃最多
     * <P>
     * 返回的过程也可以是从原点出发到原点的过程
     * <P>
     * 计算所有可能的路径能摘到樱桃
     * <p>
     * 找出两个没摘到同一个樱桃并且 樱桃数最多的路径
     * <p>
     * <p>
     * 不摘到同一个樱桃
     * 每种路径记录摘取樱桃的位置，最终取交集个数
     *
     * </p>
     *
     * @param grid 游戏抽象的网格
     * @return 最多能摘到的樱桃
     */
    public int cherryPickup(int[][] grid) {

        for (int i = 0; i < grid.length; i++) {

        }
        return 0;
    }

    @Test
    public void test() {

    }

}
